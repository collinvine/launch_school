{"version":3,"file":"autocomplete.min.js","sources":["autocomplete.ts"],"sourcesContent":["/*\n * https://github.com/kraaden/autocomplete\n * Copyright (c) 2016 Denys Krasnoshchok\n * MIT License\n */\n\nexport const enum EventTrigger {\n    Keyboard = 0,\n    Focus = 1\n}\n\nexport interface AutocompleteItem {\n    label?: string;\n    group?: string;\n}\n\nexport interface AutocompleteSettings<T extends AutocompleteItem> {\n    /**\n     * Autocomplete will be attached to this element.\n     */\n    input: HTMLInputElement | HTMLTextAreaElement;\n\n    /**\n     * Provide your own container for the widget.\n     * If not specified, a new DIV element will be created.\n     */\n    container?: HTMLDivElement;\n\n    /**\n     * This method allows you to override the default rendering function for items.\n     * It must return a DIV element or undefined to skip rendering.\n     */\n    render?: (item: T, currentValue: string, index: number) => HTMLDivElement | undefined;\n\n    /**\n     * This method allows you to override the default rendering function for item groups.\n     * It must return a DIV element or undefined to skip rendering.\n     */\n    renderGroup?: (name: string, currentValue: string) => HTMLDivElement | undefined;\n\n    /**\n     * If specified, the autocomplete DOM element will have this class assigned to it.\n     */\n    className?: string;\n\n    /**\n     * Specify the minimum text length required to show autocomplete.\n     */\n    minLength?: number;\n\n    /**\n     * The message that will be showed when there are no suggestions that match the entered value.\n     */\n    emptyMsg?: string;\n\n    /**\n     * This method will be called when user choose an item in autocomplete. The selected item will be passed as the first parameter.\n     */\n    onSelect: (item: T, input: HTMLInputElement | HTMLTextAreaElement) => void;\n\n    /**\n     * Show autocomplete on focus event. Focus event will ignore the `minLength` property and will always call `fetch`.\n     */\n    showOnFocus?: boolean;\n\n    /**\n     * This method will be called to prepare suggestions and then pass them to autocomplete.\n     * @param {string} text - text in the input field\n     * @param {(items: T[] | false) => void} update - a callback function that must be called after suggestions are prepared\n     * @param {EventTrigger} trigger - type of the event that triggered the fetch\n     * @param {number} cursorPos - position of the cursor in the input field\n     */\n    fetch: (text: string, update: (items: T[] | false) => void, trigger: EventTrigger, cursorPos: number) => void;\n\n    /**\n     * Enforces that the fetch function will only be called once within the specified time frame (in milliseconds) and\n     * delays execution. This prevents flooding your server with AJAX requests.\n     */\n    debounceWaitMs?: number;\n\n    /**\n     * Callback for additional autocomplete customization\n     * @param {HTMLInputElement | HTMLTextAreaElement} input - input box associated with autocomplete\n     * @param {ClientRect | DOMRect} inputRect - size of the input box and its position relative to the viewport\n     * @param {HTMLDivElement} container - container with suggestions\n     * @param {number} maxHeight - max height that can be used by autocomplete\n     */\n    customize?: (input: HTMLInputElement | HTMLTextAreaElement, inputRect: ClientRect | DOMRect, container: HTMLDivElement, maxHeight: number) => void;\n\n    /**\n     * Prevents automatic form submit when ENTER is pressed\n     */\n    preventSubmit?: boolean;\n\n    /**\n     * Prevents the first item in the list from being selected automatically. This option allows you\n     * to submit a custom text by pressing ENTER even when autocomplete is displayed.\n     */\n    disableAutoSelect?: boolean;\n\n    /**\n     * Keys that will be ignored and not trigger the fetch callback.\n     */\n    keysToIgnore?: Keys[];\n}\n\nexport interface AutocompleteResult {\n    destroy: () => void;\n}\n\nexport const enum Keys {\n    Enter = 13,\n    Esc = 27,\n    Up = 38,\n    Down = 40,\n    Left = 37,\n    Right = 39,\n    Shift = 16,\n    Ctrl = 17,\n    Alt = 18,\n    CapsLock = 20,\n    WindowsKey = 91,\n    Tab = 9,\n    F1 = 112,\n    F12 = 123\n}\n\nexport default function autocomplete<T extends AutocompleteItem>(settings: AutocompleteSettings<T>): AutocompleteResult {\n\n    // just an alias to minimize JS file size\n    const doc = document;\n\n    const container: HTMLDivElement = settings.container || doc.createElement(\"div\");\n    container.id = container.id || \"autocomplete-\" + uid();\n    const containerStyle = container.style;\n    const userAgent = navigator.userAgent;\n    const mobileFirefox = ~userAgent.indexOf(\"Firefox\") && ~userAgent.indexOf(\"Mobile\");\n    const debounceWaitMs = settings.debounceWaitMs || 0;\n    const preventSubmit = settings.preventSubmit || false;\n    const disableAutoSelect = settings.disableAutoSelect || false;\n\n    // 'keyup' event will not be fired on Mobile Firefox, so we have to use 'input' event instead\n    const keyUpEventName = mobileFirefox ? \"input\" : \"keyup\";\n\n    let items: T[] = [];\n    let inputValue = \"\";\n    let minLen = 2;\n    const showOnFocus = settings.showOnFocus;\n    let selected: T | undefined;\n    let keypressCounter = 0;\n    let debounceTimer: number | undefined;\n\n    if (settings.minLength !== undefined) {\n        minLen = settings.minLength;\n    }\n\n    if (!settings.input) {\n        throw new Error(\"input undefined\");\n    }\n\n    const input: HTMLInputElement | HTMLTextAreaElement = settings.input;\n\n    container.className = \"autocomplete \" + (settings.className || \"\");\n    container.setAttribute(\"role\", \"listbox\");\n\n    input.setAttribute(\"role\", \"combobox\");\n    input.setAttribute(\"aria-expanded\", \"false\");\n    input.setAttribute(\"aria-autocomplete\", \"list\");\n    input.setAttribute(\"aria-controls\", container.id);\n    input.setAttribute(\"aria-owns\", container.id);\n    input.setAttribute(\"aria-activedescendant\", \"\");\n    input.setAttribute(\"aria-haspopup\", \"listbox\");\n\n    // IOS implementation for fixed positioning has many bugs, so we will use absolute positioning\n    containerStyle.position = \"absolute\";\n\n    /**\n     * Generate a unique ID\n     */\n    function uid(): string {\n        return Date.now().toString(36) + Math.random().toString(36).substring(2);\n    }\n\n    /**\n     * Detach the container from DOM\n     */\n    function detach(): void {\n        const parent = container.parentNode;\n        if (parent) {\n            parent.removeChild(container);\n        }\n    }\n\n    /**\n     * Clear debouncing timer if assigned\n     */\n    function clearDebounceTimer(): void {\n        if (debounceTimer) {\n            window.clearTimeout(debounceTimer);\n        }\n    }\n\n    /**\n     * Attach the container to DOM\n     */\n    function attach(): void {\n        if (!container.parentNode) {\n            doc.body.appendChild(container);\n        }\n    }\n\n    /**\n     * Check if container for autocomplete is displayed\n     */\n    function containerDisplayed(): boolean {\n        return !!container.parentNode;\n    }\n\n    /**\n     * Clear autocomplete state and hide container\n     */\n    function clear(): void {\n        // prevent the update call if there are pending AJAX requests\n        keypressCounter++;\n\n        items = [];\n        inputValue = \"\";\n        selected = undefined;\n        input.setAttribute(\"aria-activedescendant\", \"\");\n        input.setAttribute(\"aria-expanded\", \"false\");\n        detach();\n    }\n\n    /**\n     * Update autocomplete position\n     */\n    function updatePosition(): void {\n        if (!containerDisplayed()) {\n            return;\n        }\n\n        input.setAttribute(\"aria-expanded\", \"true\");\n\n        containerStyle.height = \"auto\";\n        containerStyle.width = input.offsetWidth + \"px\";\n\n        let maxHeight = 0;\n        let inputRect: ClientRect | DOMRect | undefined;\n\n        function calc() {\n            const docEl = doc.documentElement as HTMLElement;\n            const clientTop = docEl.clientTop || doc.body.clientTop || 0;\n            const clientLeft = docEl.clientLeft || doc.body.clientLeft || 0;\n            const scrollTop = window.pageYOffset || docEl.scrollTop;\n            const scrollLeft = window.pageXOffset || docEl.scrollLeft;\n\n            inputRect = input.getBoundingClientRect();\n\n            const top = inputRect.top + input.offsetHeight + scrollTop - clientTop;\n            const left = inputRect.left + scrollLeft - clientLeft;\n\n            containerStyle.top = top + \"px\";\n            containerStyle.left = left + \"px\";\n\n            maxHeight = window.innerHeight - (inputRect.top + input.offsetHeight);\n\n            if (maxHeight < 0) {\n                maxHeight = 0;\n            }\n\n            containerStyle.top = top + \"px\";\n            containerStyle.bottom = \"\";\n            containerStyle.left = left + \"px\";\n            containerStyle.maxHeight = maxHeight + \"px\";\n        }\n\n        // the calc method must be called twice, otherwise the calculation may be wrong on resize event (chrome browser)\n        calc();\n        calc();\n\n        if (settings.customize && inputRect) {\n            settings.customize(input, inputRect, container, maxHeight);\n        }\n    }\n\n    /**\n     * Redraw the autocomplete div element with suggestions\n     */\n    function update(): void {\n\n        // delete all children from autocomplete DOM container\n        while (container.firstChild) {\n            container.removeChild(container.firstChild);\n        }\n\n        input.setAttribute(\"aria-activedescendant\", \"\");\n\n        // function for rendering autocomplete suggestions\n        let render = function (item: T, _: string, __: number): HTMLDivElement | undefined {\n            const itemElement = doc.createElement(\"div\");\n            itemElement.textContent = item.label || \"\";\n            return itemElement;\n        };\n        if (settings.render) {\n            render = settings.render;\n        }\n\n        // function to render autocomplete groups\n        let renderGroup = function (groupName: string, _: string): HTMLDivElement | undefined {\n            const groupDiv = doc.createElement(\"div\");\n            groupDiv.textContent = groupName;\n            return groupDiv;\n        };\n        if (settings.renderGroup) {\n            renderGroup = settings.renderGroup;\n        }\n\n        const fragment = doc.createDocumentFragment();\n        let prevGroup = \"#9?$\";\n\n        items.forEach(function (item: T, index: number): void {\n            if (item.group && item.group !== prevGroup) {\n                prevGroup = item.group;\n                const groupDiv = renderGroup(item.group, inputValue);\n                if (groupDiv) {\n                    groupDiv.className += \" group\";\n                    fragment.appendChild(groupDiv);\n                }\n            }\n            const div = render(item, inputValue, index);\n            if (div) {\n                div.id = `${container.id}_${index}`;\n                div.setAttribute(\"role\", \"option\");\n                div.addEventListener(\"click\", function (ev: MouseEvent): void {\n                    settings.onSelect(item, input);\n                    clear();\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                });\n                if (item === selected) {\n                    div.className += \" selected\";\n                    div.setAttribute(\"aria-selected\", \"true\");\n                    input.setAttribute(\"aria-activedescendant\", div.id);\n                }\n                fragment.appendChild(div);\n            }\n        });\n        container.appendChild(fragment);\n        if (items.length < 1) {\n            if (settings.emptyMsg) {\n                const empty = doc.createElement(\"div\");\n                empty.id = `${container.id}_${uid()}`;\n                empty.className = \"empty\";\n                empty.textContent = settings.emptyMsg;\n                container.appendChild(empty);\n                input.setAttribute(\"aria-activedescendant\", empty.id);\n            } else {\n                clear();\n                return;\n            }\n        }\n\n        attach();\n        updatePosition();\n\n        updateScroll();\n    }\n\n    function updateIfDisplayed(): void {\n        if (containerDisplayed()) {\n            update();\n        }\n    }\n\n    function resizeEventHandler(): void {\n        updateIfDisplayed();\n    }\n\n    function scrollEventHandler(e: Event): void {\n        if (e.target !== container) {\n            updateIfDisplayed();\n        } else {\n            e.preventDefault();\n        }\n    }\n\n    function keyupEventHandler(ev: KeyboardEvent): void {\n        const keyCode = ev.which || ev.keyCode || 0;\n\n        const ignore = settings.keysToIgnore || [Keys.Up, Keys.Enter, Keys.Esc, Keys.Right, Keys.Left, Keys.Shift, Keys.Ctrl, Keys.Alt, Keys.CapsLock, Keys.WindowsKey, Keys.Tab];\n        for (const key of ignore) {\n            if (keyCode === key) {\n                return;\n            }\n        }\n\n        if (keyCode >= Keys.F1 && keyCode <= Keys.F12 && !settings.keysToIgnore) {\n            return;\n        }\n\n        // the down key is used to open autocomplete\n        if (keyCode === Keys.Down && containerDisplayed()) {\n            return;\n        }\n\n        startFetch(EventTrigger.Keyboard);\n    }\n\n    /**\n     * Automatically move scroll bar if selected item is not visible\n     */\n    function updateScroll(): void {\n        const elements = container.getElementsByClassName(\"selected\");\n        if (elements.length > 0) {\n            let element = elements[0] as HTMLDivElement;\n\n            // make group visible\n            const previous = element.previousElementSibling as HTMLDivElement;\n            if (previous && previous.className.indexOf(\"group\") !== -1 && !previous.previousElementSibling) {\n                element = previous;\n            }\n\n            if (element.offsetTop < container.scrollTop) {\n                container.scrollTop = element.offsetTop;\n            } else {\n                const selectBottom = element.offsetTop + element.offsetHeight;\n                const containerBottom = container.scrollTop + container.offsetHeight;\n                if (selectBottom > containerBottom) {\n                    container.scrollTop += selectBottom - containerBottom;\n                }\n            }\n        }\n    }\n\n    /**\n     * Select the previous item in suggestions\n     */\n    function selectPrev(): void {\n        if (items.length < 1) {\n            selected = undefined;\n        } else {\n            if (selected === items[0]) {\n                selected = items[items.length - 1];\n            } else {\n                for (let i = items.length - 1; i > 0; i--) {\n                    if (selected === items[i] || i === 1) {\n                        selected = items[i - 1];\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Select the next item in suggestions\n     */\n    function selectNext(): void {\n        if (items.length < 1) {\n            selected = undefined;\n        }\n        if (!selected || selected === items[items.length - 1]) {\n            selected = items[0];\n            return;\n        }\n        for (let i = 0; i < (items.length - 1); i++) {\n            if (selected === items[i]) {\n                selected = items[i + 1];\n                break;\n            }\n        }\n    }\n\n    function keydownEventHandler(ev: KeyboardEvent): void {\n        const keyCode = ev.which || ev.keyCode || 0;\n\n        if (keyCode === Keys.Up || keyCode === Keys.Down || keyCode === Keys.Esc) {\n            const containerIsDisplayed = containerDisplayed();\n\n            if (keyCode === Keys.Esc) {\n                clear();\n            } else {\n                if (!containerIsDisplayed || items.length < 1) {\n                    return;\n                }\n                keyCode === Keys.Up\n                    ? selectPrev()\n                    : selectNext();\n                update();\n            }\n\n            ev.preventDefault();\n            if (containerIsDisplayed) {\n                ev.stopPropagation();\n            }\n\n            return;\n        }\n\n        if (keyCode === Keys.Enter) {\n            if (selected) {\n                settings.onSelect(selected, input);\n                clear();\n            }\n\n            if (preventSubmit) {\n                ev.preventDefault();\n            }\n        }\n    }\n\n    function focusEventHandler(): void {\n        if (showOnFocus) {\n            startFetch(EventTrigger.Focus);\n        }\n    }\n\n    function startFetch(trigger: EventTrigger) {\n        // If multiple keys were pressed, before we get an update from server,\n        // this may cause redrawing autocomplete multiple times after the last key was pressed.\n        // To avoid this, the number of times keyboard was pressed will be saved and checked before redraw.\n        const savedKeypressCounter = ++keypressCounter;\n\n        const inputText = input.value;\n        const cursorPos = input.selectionStart || 0;\n\n        if (inputText.length >= minLen || trigger === EventTrigger.Focus) {\n            clearDebounceTimer();\n            debounceTimer = window.setTimeout(function (): void {\n                settings.fetch(inputText, function (elements: T[] | false): void {\n                    if (keypressCounter === savedKeypressCounter && elements) {\n                        items = elements;\n                        inputValue = inputText;\n                        selected = (items.length < 1 || disableAutoSelect) ? undefined : items[0];\n                        update();\n                    }\n                }, trigger, cursorPos);\n            }, trigger === EventTrigger.Keyboard ? debounceWaitMs : 0);\n        } else {\n            clear();\n        }\n    }\n\n    function blurEventHandler(): void {\n        // we need to delay clear, because when we click on an item, blur will be called before click and remove items from DOM\n        setTimeout(() => {\n            if (doc.activeElement !== input) {\n                clear();\n            }\n        }, 200);\n    }\n\n    /**\n     * Fixes #26: on long clicks focus will be lost and onSelect method will not be called\n     */\n    container.addEventListener(\"mousedown\", function (evt: Event) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    });\n\n    /**\n     * Fixes #30: autocomplete closes when scrollbar is clicked in IE\n     * See: https://stackoverflow.com/a/9210267/13172349\n     */\n    container.addEventListener(\"focus\", () => input.focus());\n\n    /**\n     * This function will remove DOM elements and clear event handlers\n     */\n    function destroy(): void {\n        input.removeEventListener(\"focus\", focusEventHandler);\n        input.removeEventListener(\"keydown\", keydownEventHandler as EventListenerOrEventListenerObject);\n        input.removeEventListener(keyUpEventName, keyupEventHandler as EventListenerOrEventListenerObject);\n        input.removeEventListener(\"blur\", blurEventHandler);\n        window.removeEventListener(\"resize\", resizeEventHandler);\n        doc.removeEventListener(\"scroll\", scrollEventHandler, true);\n        input.removeAttribute(\"role\");\n        input.removeAttribute(\"aria-expanded\");\n        input.removeAttribute(\"aria-autocomplete\");\n        input.removeAttribute(\"aria-controls\");\n        input.removeAttribute(\"aria-activedescendant\");\n        input.removeAttribute(\"aria-owns\");\n        input.removeAttribute(\"aria-haspopup\");\n        clearDebounceTimer();\n        clear();\n    }\n\n    // setup event handlers\n    input.addEventListener(\"keydown\", keydownEventHandler as EventListenerOrEventListenerObject);\n    input.addEventListener(keyUpEventName, keyupEventHandler as EventListenerOrEventListenerObject);\n    input.addEventListener(\"blur\", blurEventHandler);\n    input.addEventListener(\"focus\", focusEventHandler);\n    window.addEventListener(\"resize\", resizeEventHandler);\n    doc.addEventListener(\"scroll\", scrollEventHandler, true);\n\n    return {\n        destroy\n    };\n}\n"],"names":["settings","doc","document","container","createElement","id","uid","selected","debounceTimer","containerStyle","style","userAgent","navigator","mobileFirefox","indexOf","debounceWaitMs","preventSubmit","disableAutoSelect","keyUpEventName","items","inputValue","minLen","showOnFocus","keypressCounter","undefined","minLength","input","Error","Date","now","toString","Math","random","substring","clearDebounceTimer","window","clearTimeout","containerDisplayed","parentNode","clear","parent","setAttribute","removeChild","update","firstChild","render","item","_","__","itemElement","textContent","label","renderGroup","groupName","groupDiv","fragment","createDocumentFragment","prevGroup","forEach","index","group","className","appendChild","div","addEventListener","ev","onSelect","preventDefault","stopPropagation","length","emptyMsg","empty","body","height","width","offsetWidth","inputRect","maxHeight","calc","customize","docEl","documentElement","clientTop","clientLeft","scrollTop","pageYOffset","scrollLeft","pageXOffset","top","getBoundingClientRect","offsetHeight","left","innerHeight","bottom","updatePosition","elements","getElementsByClassName","element","previous","previousElementSibling","offsetTop","selectBottom","containerBottom","updateScroll","updateIfDisplayed","resizeEventHandler","scrollEventHandler","e","target","keyupEventHandler","keyCode","which","ignore_1","keysToIgnore","_i","startFetch","keydownEventHandler","containerIsDisplayed","i","selectPrev","selectNext","focusEventHandler","trigger","savedKeypressCounter","inputText","value","cursorPos","selectionStart","setTimeout","fetch","blurEventHandler","activeElement","position","evt","focus","destroy","removeEventListener","removeAttribute"],"mappings":"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"}